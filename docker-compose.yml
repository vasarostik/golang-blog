version: '3'

# Define services
services:

  # App Service
  app:
    # Configuration for building the docker image for the service
    build:
      context: . # Use an image built from the specified dockerfile in the current directory.
      #dockerfile: cmd/api/Dockerfile
      dockerfile: dockerfiles/api/Dockerfile.binary
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    depends_on:
      - db # This service depends on db. Start that first.
      - manager
      - grpc
      - nats-server
    env_file:
      - ./azure.env
    entrypoint: ./migration.sh
    command: ./dockerfiles/api/api

  # Manager Service
  manager:
    build:
      context: .
      dockerfile: dockerfiles/configManager/Dockerfile.binary
    ports:
      - "10001:10001"
    env_file:
      - ./azure.env
    command: ./dockerfiles/configManager/configManager

  # GRPC Service
  grpc:
    build:
      context: .
      dockerfile: dockerfiles/grpc/Dockerfile.binary
    ports:
      - "8081:8081"
    depends_on:
      - manager
      - redis
    env_file:
      - ./azure.env
    command: ./dockerfiles/grpc/grpc

  # DB Service (Postgres)
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - mydbdata:/var/lib/postgresql/data

  # Redis Service
  redis:
    image: 'redis:alpine'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - redis_storage:/data
    entrypoint: redis-server

  # Nats Subscriber Service
  nats-subscriber:
    build:
      context: .
      dockerfile: dockerfiles/nats/Dockerfile.binary
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/go/src/github.com/vasarostik/go_blog/logs
    depends_on:
      - manager
      - nats-server
      - app
      - redis
      - db
    env_file:
      - ./azure.env
    command: ./dockerfiles/nats/nats

  # Nats Server Service
  nats-server:
    image: 'nats'
    hostname: nats-server

  # React UI Service
  ui:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "1234:1234"
    environment:
      - NODE_ENV=development
    depends_on:
      - app
    command: npm start

volumes:
  mydbdata:
  redis_storage: