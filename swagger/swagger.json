{
  "swagger": "2.0",
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs in user by username and password.",
        "operationId": "login",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/loginResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/errMsg"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "404": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Gets user's info from session.",
        "operationId": "meReq",
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/mesages": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Creates new Web Socket connection.",
        "operationId": "generateChat",
        "responses": {
          "200": {
            "$ref": "#/responses/messagesListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/refresh/{token}": {
      "get": {
        "description": "Refreshes jwt token by checking at database whether refresh token exists.",
        "tags": [
          "auth"
        ],
        "summary": "Refreshes jwt token.",
        "operationId": "refresh",
        "parameters": [
          {
            "type": "string",
            "description": "refresh token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/refreshResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/password/{id}": {
      "patch": {
        "description": "If user's old passowrd is correct, it will be replaced with new password.",
        "tags": [
          "password"
        ],
        "summary": "Changes user's password.",
        "operationId": "pwChange",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pwChange"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/post/create": {
      "post": {
        "tags": [
          "posts"
        ],
        "summary": "Creates new post.",
        "operationId": "createPost",
        "responses": {
          "200": {
            "$ref": "#/responses/postResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/post/{id}": {
      "delete": {
        "description": "Deletes a post with requested ID.",
        "tags": [
          "posts"
        ],
        "summary": "Deletes a post",
        "operationId": "deletePost",
        "parameters": [
          {
            "type": "int",
            "description": "id of post",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "patch": {
        "tags": [
          "posts"
        ],
        "summary": "Updates post's information",
        "operationId": "singleUpdatePost",
        "parameters": [
          {
            "type": "int",
            "description": "id of post",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Title of post",
            "name": "title",
            "in": "body",
            "required": true
          },
          {
            "description": "Conent of post",
            "name": "content",
            "in": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/posts": {
      "get": {
        "description": "Returns list of post.",
        "tags": [
          "posts"
        ],
        "summary": "Returns list of posts.",
        "operationId": "allPosts",
        "parameters": [
          {
            "type": "int",
            "description": "number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/posts/my": {
      "get": {
        "description": "Returns list of posts.",
        "tags": [
          "posts"
        ],
        "summary": "Returns list of users`s posts.",
        "operationId": "MyPosts",
        "parameters": [
          {
            "type": "int",
            "description": "number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/posts/my/grpc": {
      "get": {
        "description": "Returns list of users.",
        "tags": [
          "posts"
        ],
        "summary": "Returns list of user`s posts with GRPC.",
        "operationId": "myPostsGRPC",
        "parameters": [
          {
            "type": "int",
            "description": "number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/posts/{id}": {
      "get": {
        "description": "Returns a single post by its ID.",
        "tags": [
          "posts"
        ],
        "summary": "Returns a single post.",
        "operationId": "singlePost",
        "parameters": [
          {
            "type": "int",
            "description": "id of post",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postResp"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "404": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "description": "Returns list of users. Depending on the user role requesting it, it may return all users for SuperAdmin/Admin users, all company/location users for Company/Location admins, and an error for non-admin users.",
        "tags": [
          "users"
        ],
        "summary": "Returns list of users.",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "int",
            "description": "number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates new user account.",
        "operationId": "userCreate",
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "description": "Returns a single user by its ID.",
        "tags": [
          "users"
        ],
        "summary": "Returns a single user.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "404": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "delete": {
        "description": "Deletes a user with requested ID.",
        "tags": [
          "users"
        ],
        "summary": "Deletes a user",
        "operationId": "userDelete",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "patch": {
        "description": "Updates user's contact information -\u003e first name, last name, mobile, phone, address.",
        "tags": [
          "users"
        ],
        "summary": "Updates user's contact information",
        "operationId": "userUpdate",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/ws": {
      "get": {
        "tags": [
          "chat"
        ],
        "summary": "Creates new Web Socket connection.",
        "operationId": "generateChat",
        "responses": {
          "200": {},
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessRole": {
      "description": "AccessRole represents access role type",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/vasarostik/go_blog/pkg/utl/model"
    },
    "MessagesList": {
      "type": "object",
      "properties": {
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Messages"
        }
      },
      "x-go-package": "github.com/vasarostik/go_blog/pkg/utl/model"
    },
    "Post": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "x-go-name": "Content"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        },
        "post_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/vasarostik/go_blog/pkg/utl/model"
    },
    "Role": {
      "description": "Role model",
      "type": "object",
      "properties": {
        "access_level": {
          "$ref": "#/definitions/AccessRole"
        },
        "id": {
          "$ref": "#/definitions/AccessRole"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/vasarostik/go_blog/pkg/utl/model"
    },
    "User": {
      "description": "User represents user domain model",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "last_login": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastLogin"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "last_password_change": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastPasswordChange"
        },
        "role": {
          "$ref": "#/definitions/Role"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/vasarostik/go_blog/pkg/utl/model"
    },
    "credentials": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/vasarostik/go_blog/pkg/api/auth/transport"
    }
  },
  "responses": {
    "loginResp": {
      "description": "Login response",
      "schema": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "x-go-name": "Expires"
          },
          "refresh_token": {
            "type": "string",
            "x-go-name": "RefreshToken"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "messagesListResp": {
      "description": "Chat model response",
      "schema": {
        "type": "object",
        "properties": {
          "messages": {
            "$ref": "#/definitions/MessagesList"
          },
          "page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page"
          }
        }
      }
    },
    "postListResp": {
      "description": "Post model response",
      "schema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page"
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Post"
            },
            "x-go-name": "Posts"
          }
        }
      }
    },
    "postResp": {
      "description": "Post response",
      "schema": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "x-go-name": "Content"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "DeletedAt"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "UserID"
          },
          "post_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "title": {
            "type": "string",
            "x-go-name": "Title"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      }
    },
    "refreshResp": {
      "description": "Token refresh response",
      "schema": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "x-go-name": "Expires"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "userListResp": {
      "description": "Users model response",
      "schema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            },
            "x-go-name": "Users"
          }
        }
      }
    },
    "userResp": {
      "description": "User model response",
      "schema": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "x-go-name": "Active"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "DeletedAt"
          },
          "first_name": {
            "type": "string",
            "x-go-name": "FirstName"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "LastLogin"
          },
          "last_name": {
            "type": "string",
            "x-go-name": "LastName"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "LastPasswordChange"
          },
          "role": {
            "$ref": "#/definitions/Role"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      }
    }
  }
}